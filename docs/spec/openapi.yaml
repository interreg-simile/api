openapi: 3.0.0

#----------------------
# Server objects
#----------------------
servers:
  - url: "https://api-simile.como.polimi.it/v1"
    description: "Production server"

#----------------------
# Metadata
#----------------------
info:
  title: "SIMILE Api"
  version: "2.0.0"
  x-logo:
    url: "https://raw.githubusercontent.com/interreg-simile/api/master/docs/media/logo.png"
  description: |
    Documentation in **OpenAPI format** of
    [interreg SIMILE project](https://progetti.interreg-italiasvizzera.eu/it/b/78/sistemainformativoperilmonitoraggiointegratodeilaghiinsubriciedeiloroe) API.

    # Introduction
    This REST API has been developed in the context of interreg SIMILE project. Its main goals are to manage the
    citizen-generated data regarding the quality of the insubric lakes waters as well as the communications and the events
    released by the project partners.

    This documentation aims at providing all the information needed by developers to interact with the SIMILE system.


    # REST API
    The SIMILE REST API allow you to integrate and perform queries to the database containing the citizen-generated
    data and the project partners' news.

    The API is based on REST principles and it supports the following *HTTP verbs*.
    - **GET** to retrieve information.
    - **POST** to create a new entity.
    - **PATCH** to patially update an existing entity.


    ## Authentication
    Some routes requires an authenticated user, while some others offers authenticated users more funciontalities.

    This API uses the [JSON Web Token](https://jwt.io/introduction/) standard to implement users authentication. When a user logs in,
    the system generates and returns a random JWT that should be sent with all the subsequent requests as an
    [Authorization header](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Authorization) with the following
    syntax:

    ```
    Authorization: Bearer <token>
    ```


    ## Response structure
    Every response has the following structure:
    ```json
    {
      "meta": {
        "code": 200
      },
      "data": ...
    }
    ```

    ### Meta
    The meta key is used to communicate extra information about the response to the developer. If everything goes well
    it will only contain a code key with value 2xx. However, if something goes wrong, the response will be something
    like:
    ```json
    {
      "meta": {
        "code": 404,
        "errorMessage": "Resource not found.",
        "errorType": "NotFoundException"
      }
    }
    ```

    #### Possible response status codes
    | Status code | Description            | Notes                                                                                         |
    |:-----------:|:-----------------------|-----------------------------------------------------------------------------------------------|
    | 200         | OK                     | The request was successful.                                                                   |
    | 201         | Created                | A new resource has been created.                                                              |
    | 204         | No Content             | The request does not need to return an entity-body.                                           |
    | 400         | Bad Request            | The request could not be understood by the server due to malformed syntax.                    |
    | 401         | Unauthorized           | The request requires user authentication.                                                     |
    | 403         | Forbidden              | The request is forbidden.                                                                     |
    | 404         | Not Found              | The server has not found anything matching the Request-URI.                                   |
    | 409         | Conflict               | the request could not be processed because of conflicts.                                      |
    | 415         | Unsupported Media Type | The request entity has a media type which the server or resource does not support.            |
    | 422         | Unprocessable Entity   | The request was well-formed but was unable to be followed due to semantic errors.             |
    | 500         | Internal Server Error  | The server encountered an unexpected condition which prevented it from fulfilling the request.|


    ### Data
    The data key contains the actual response. It may be and Array or an Object, but either way here you will find the
    data requested. Unless otherwise specified in the docs, the data will be in **JSON format**.


    ## Response language
    Some resources are available in mutiple languages. You can specify your preferred language or languages using the
    ```Accept-Language``` HTTP header in the request. Using content negotiation, the server will select one of the
    proposals and the used language will appear in the ```Content-Language``` response header.

    If the server cannot serve any matching language it will use **English** as default language.

    #### Examples
    ```json
    Accept-Language: en

    Accept-Language: it,en
    ```

    #### Supported languages
    |  Language code  |  Language |
    |:---------------:|:---------:|
    | en              | English   |
    | it              | Italian   |

  contact:
    name: "Edoardo Pessina"
    email: "interreg-simile@polimi.it"
  license:
    name: "Apache License 2.0"
    url: "https://choosealicense.com/licenses/apache-2.0/"

#----------------------
# Tags
#----------------------
tags:
  - name: auth
    x-displayName: Auth
    description: "Authorization and authentication."
  - name: user
    x-displayName: Users
    description: "Registered users"
  - name: observation
    x-displayName: Observations
    description: "User generated data."
  - name: alert
    x-displayName: Alerts
    description: "Alerts created by the project partners."
  - name: event
    x-displayName: Events
    description: "Events created by the project partners."
  - name: roi
    x-displayName: Regions of interest
    description: "Regions of interest supported by the application."
  - name: misc
    x-displayName: Miscellaneous
    description: "Miscellaneous resources and methods."
  - name: user_model
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/User" />
    x-displayName: User
  - name: observation_model
    description: |
      The data gathered by the citizens are called *observations*.

      ## Enums

      ### position

      #### crs
      | Code | Description           |
      |:----:|:----------------------|
      | 1    | WGS 84                |
      | 2    | WGS 84 / UTM zone 32N |
      | 3    | CH1903+ / LV95        |

      ### weather

      #### sky
      | Code | Description |
      |:----:|:------------|
      | 1    | Clear sky   |
      | 2    | Few clouds  |
      | 3    | Cloudy      |
      | 4    | Rain        |
      | 5    | Snow        |
      | 6    | Fog         |

      ### details

      #### algae

      ##### extension
      | Code | Description  |
      |:----:|:-------------|
      | 1    | < 5 sq. m    |
      | 2    | 5 - 20 sq. m |
      | 3    | > 20 sq. m   |

      ##### look
      | Code | Description     |
      |:----:|:----------------|
      | 1    | Scattered       |
      | 2    | Compact         |
      | 3    | Grouped         |
      | 4    | Surface stripes |

      ##### colour
      | Code | Description |
      |:----:|:------------|
      | 1    | Red         |
      | 2    | Blu         |
      | 3    | Green       |
      | 4    | Grey        |
      | 5    | Brown       |

      #### foams

      ##### extension
      | Code | Description  |
      |:----:|:-------------|
      | 1    | < 5 sq. m    |
      | 2    | 5 - 20 sq. m |
      | 3    | > 20 sq. m   |

      ##### look
      | Code | Description     |
      |:----:|:----------------|
      | 1    | Scattered       |
      | 2    | Compact         |
      | 3    | Linear          |

      ##### height
      | Code | Description |
      |:----:|:------------|
      | 1    | < 3 cm      |
      | 2    | 3 - 20 cm   |
      | 3    | > 20 cm     |

      #### oils

      ##### extension
      | Code | Description  |
      |:----:|:-------------|
      | 1    | < 5 sq. m    |
      | 2    | 5 - 20 sq. m |
      | 3    | > 20 sq. m   |

      ##### type
      | Code | Description |
      |:----:|:------------|
      | 1    | On surface  |
      | 2    | In depth    |

      #### litters

      ##### quantity
      | Code | Description |
      |:----:|:------------|
      | 1    | 1           |
      | 2    | 2 - 20      |
      | 3    | > 20        |

      ##### type
      | Code | Description               |
      |:----:|:--------------------------|
      | 1    | Plastic                   |
      | 2    | Glass / Ceramic           |
      | 3    | Metal                     |
      | 4    | Paper / Cardboard         |
      | 5    | Textiles                  |
      | 6    | Rubber                    |
      | 7    | Treated wood              |
      | 8    | Bricks                    |
      | 9    | Vegetal debris            |
      | 10   | Decaying organic material |

      #### odourds

      ##### intensity
      | Code | Description |
      |:----:|:------------|
      | 1    | Slight      |
      | 2    | Medium      |
      | 3    | Strong      |

      ##### type
      | Code | Description       |
      |:----:|:------------------|
      | 1    | Fish              |
      | 2    | Mold              |
      | 3    | Hydrocarbon       |
      | 4    | Solvent           |
      | 5    | Sewer             |
      | 6    | Decaying material |

      #### outlets

      ##### terminal
      | Code | Description |
      |:----:|:------------|
      | 1    | Visible     |
      | 2    | Submerged   |

      ##### colour
      | Code | Description |
      |:----:|:------------|
      | 1    | Red         |
      | 2    | Blu         |
      | 3    | Green       |
      | 4    | Grey        |
      | 5    | Brown       |
      | 6    | Yellow      |
      | 7    | White       |

      #### fauna.*.alien.species
      | Fauna type  | Code | Description          |
      |:------------|:----:|:---------------------|
      | fish        | 1    | Stone moroko         |
      | birds       | 1    | Egyptian goose       |
      | birds       | 2    | African sacred ibis  |
      | molluscs    | 1    | Corbicula fluminea   |
      | molluscs    | 2    | Dreissena polymorpha |
      | molluscs    | 3    | Sinanodonta woodiana |
      | crustaceans | 1    | Spinycheek crayfish  |
      | crustaceans | 2    | Signal crayfish      |
      | crustaceans | 3    | Louisiana crayfish   |
      | turtles     | 1    | Pond slider          |

      ### measures.*.instrument.type
      | Code | Description  |
      |:----:|:-------------|
      | 1    | Professional |
      | 2    | Artisanal    |


      ## Schema
      <SchemaDefinition schemaRef="#/components/schemas/Observation" />
    x-displayName: Observation
  - name: alert_model
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/Alert" />
    x-displayName: Alert
  - name: event_model
    description: |
      <SchemaDefinition schemaRef="#/components/schemas/Event" />
    x-displayName: Event
  - name: roi_model
    description: |
      The system has been desiged to operate on a series of regions of interest, namely the area of the insubric lakes.

      ## Enums

      ### country
      | Code | Description |
      |:----:|:------------|
      | 1    | Italy       |
      | 2    | Switzerland |

      ### area
      | Code | Description      |
      |:----:|:-----------------|
      | 1    | Lombardy Region  |
      | 2    | Piedmont Region  |
      | 3    | Canton of Ticino |

      ### lake
      | Code | Description   |
      |:----:|:--------------|
      | 1    | Lake Maggiore |
      | 2    | Lake Como     |
      | 3    | Lake Lugano   |

      ## Schema
      <SchemaDefinition schemaRef="#/components/schemas/Roi" />
    x-displayName: Region of interest
  - name: link_model
    description: |
      Useful links displayed in SIMILE application.

      <SchemaDefinition schemaRef="#/components/schemas/Link" />
    x-displayName: Link
  - name: contact_model
    description: |
      Contact of the competent authority of each area supported by SIMILE application.

      <SchemaDefinition schemaRef="#/components/schemas/Contact" />
    x-displayName: Authority Contact

#----------------------
# Tags groups
#----------------------
x-tagGroups:
  - name: Endpoints
    tags:
      - auth
      - user
      - observation
      - alert
      - event
      - roi
      - misc
  - name: Models
    tags:
      - user_model
      - observation_model
      - alert_model
      - event_model
      - roi_model
      - link_model
      - contact_model

#----------------------
# Endpoints
#----------------------
paths:

  /auth/register:

    post:
      tags:
        - auth
      summary: Register
      description: Register a new account into the system.
      operationId: register
      requestBody:
        content:
          application/json:
            schema:
              $ref: ./models/user/register-body.yaml
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  email:
                    type: string
                required:
                  - email

  /auth/login:

    post:
      tags:
        - auth
      summary: Login
      description: Login into the system.
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: ./models/user/login-body.yaml
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: Gnerated JWT.
                  userId:
                    type: string
                required:
                  - token
                  - userId

  /auth/send-confirmation-email:
    post:
      tags:
        - auth
      summary: Send confirmation email
      description: Send a user confirmation email.
      requestBody:
        content:
          application/json:
            schema:
              $ref: ./models/user/send-confirmation-email-body.yaml
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  email:
                    type: string
                required:
                  - email

  /auth/confirm-email:
    get:
      tags:
        - auth
      summary: Confirmation email
      description: |
        Confirm a user's email.

        This route renders a view displaying the operation outcome.
      parameters:
        - name: email
          in: query
          description: User's email.
          required: true
          schema:
            type: string
        - name: token
          in: query
          description: Email confirmation token.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            text/html:
              schema:
                type: string
                format: binary

  /auth/reset-password:
    post:
      tags:
        - auth
      summary: Reset password
      description: Reset the user's password.
      requestBody:
        content:
          application/json:
            schema:
              $ref: ./models/user/send-confirmation-email-body.yaml
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  email:
                    type: string
                required:
                  - email

  /users/{id}:

    get:
      tags:
        - user
      summary: Get by Id
      description: |
        Returns the user with the given id.

        **N.B.** This route requires an **authenticated user**.
      operationId: get-user
      parameters:
        - name: id
          in: path
          description: The id of the user.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./models/user/get-user-response.yaml

    delete:
      tags:
        - user
      summary: Delete by Id
      description: |
        Deletes a user by id.

        **N.B.** This route requires an **authenticated user**.
      operationId: delete-user
      parameters:
        - name: id
          in: path
          description: The id of the user.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No Content

  /users/{id}/change-email:

    patch:
      tags:
        - user
      summary: Change email
      description: |
        Change user's email.

        **N.B.** This route requires an **authenticated user**.
      operationId: change-email
      parameters:
        - name: id
          in: path
          description: The id of the user.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: New email.
              required:
                - email
      responses:
        '204':
          description: No Content

  /users/{id}/change-password:

    patch:
      tags:
        - user
      summary: Change password
      description: |
        Change user's password.

        **N.B.** This route requires an **authenticated user**.
      operationId: change-password
      parameters:
        - name: id
          in: path
          description: The id of the user.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: ./models/user/change-password-body.yaml
      responses:
        '204':
          description: No Content

  /users/{id}/change-info:

    patch:
      tags:
        - user
      summary: Change info
      description: |
        Change user's information.

        **N.B.** This route requires an **authenticated user**.
      operationId: change-info
      parameters:
        - name: id
          in: path
          description: The id of the user.
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: ./models/user/change-info-body.yaml
      responses:
        '204':
          description: No Content

  /alerts/:

    get:
      tags:
        - alert
      summary: Get All
      description: Returns all the alerts.
      operationId: get-alerts
      parameters:
        - name: includePast
          in: query
          description: |
            States if the response should include the alerts with ```dateEnd``` lower than current date.
          required: false
          schema:
            type: boolean
            default: true
        - name: sort
          in: query
          description: |
            Allows to specify which field(s) to use to sort the data. If more than one filed is specified, the data
            will be sorted in order from left to right. You can decide whether you want the sorting to be done in ascending
            or descending order by adding respectively ```:asc``` or ```:desc``` after each of the field. If no order is
            given it will default to ascending.
          required: false
          schema:
            type: string
            enum:
              - createdAt
              - dateEnd
          example: dateEnd:asc,createdAt:desc
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ./models/alert/get-response.yaml

  /alerts/{id}:

    get:
      tags:
        - alert
      summary: Get by Id
      description: Returns the alert with the given id.
      operationId: get-alert
      parameters:
        - name: id
          in: path
          description: The id of the alert.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./models/alert/get-response.yaml

  /events/:

    get:
      tags:
        - event
      summary: Get All
      description: Returns all the events.
      operationId: get-events
      parameters:
        - name: includePast
          in: query
          description: |
            States if the response should include the alerts with ```date``` lower than current date.
          required: false
          schema:
            type: boolean
            default: true
        - name: sort
          in: query
          description: |
            Allows to specify which field(s) to use to sort the data. If more than one filed is specified, the data
            will be sorted in order from left to right. You can decide whether you want the sorting to be done in ascending
            or descending order by adding respectively ```:asc``` or ```:desc``` after each of the field. If no order is
            given it will default to ascending.
          required: false
          schema:
            type: string
            enum:
              - date
          example: date:asc
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ./models/event/get-response.yaml

  /events/{id}:

    get:
      tags:
        - event
      summary: Get by Id
      description: Returns the event with the given id.
      operationId: get-event
      parameters:
        - name: id
          in: path
          description: The id of the event.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: ./models/event/get-response.yaml

  /observations/:

    get:
      tags:
        - observation
      summary: Get All
      description: Returns all the observations.
      operationId: get-observations
      parameters:
        - name: excludeOutOfRois
          in: query
          description: States if the response should exclude the observations outside of the regions of interest.
          required: false
          schema:
            type: boolean
            default: false
        - name: crs
          in: query
          description: |
            Desired coordinate reference system of the observations position. For the possible values see the
            corresponding enumeration in the model section.
          required: false
          schema:
            type: integer
            default: 1
        - name: minimalRes
          in: query
          description: |
            States if the response should contain only the essential data of the observations:
            ```json
            [
              {
                "_id": "string",
                "uid": "string",
                "position": {
                  "coordinates": [0, 0],
                  "crs": 1,
                  "roi": "string"
                },
                "createdAt": "2000-01-01T00:00:00.000Z"
              },
              ...
            ]
            ```
          required: false
          schema:
            type: boolean
            default: false
        - name: mode
          in: query
          description: |
            States if the response should follow the [GeoJSON](https://geojson.org/) specification:
            ```json
            {
              "type": "FeatureCollection",
              "features": [
                {
                  "type"      : "Feature",
                  "geometry"  : {
                    "type"       : "Point",
                    "coordinates": [0, 0]
                  },
                  "properties": { ... }
                },
                ...
              ]
            }
            ```
          required: false
          schema:
            type: string
            enum:
              - json
              - geojson
            default: json
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Observation'

    post:
      tags:
        - observation
      summary: Create One
      description: Creates a new observation.
      operationId: post-observation
      parameters:
        - name: callId
          in: query
          description: States if the five digits code that links the observation to a call to the competent authority should be generated.
          required: false
          schema:
            type: boolean
            default: false
        - name: minimalRes
          in: query
          description: |
            States if the response should contain only the essential data of the observations:
            ```json
            {
              "_id": "string",
              "uid": "string",
              "callId": 0,
              "position": {
                "coordinates": [0, 0],
                "roi": "string",
                "area": 0
              }
            }
            ```
          required: false
          schema:
            type: boolean
            default: false
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: ./models/observation/observation-post.yaml
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Observation'

  /observations/{id}:

    get:
      tags:
        - observation
      summary: Get by Id
      description: Returns the observation with the given id.
      operationId: get-observation
      parameters:
        - name: id
          in: path
          description: The id of the observation.
          required: true
          schema:
            type: string
        - name: crs
          in: query
          description: |
            Desired coordinate reference system of the observation position. For the possible values see the
            corresponding enumeration in the model section.
          required: false
          schema:
            type: integer
            default: 1
        - name: mode
          in: query
          description: |
            States if the response should follow the [GeoJSON](https://geojson.org/) specification:
            ```json
            {
              "type"      : "Feature",
              "geometry"  : {
                "type"       : "Point",
                "coordinates": [0, 0]
              },
              "properties": { ... }
            }
            ```
          required: false
          schema:
            type: string
            enum:
              - json
              - geojson
            default: json
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Observation'

  /rois/:

    get:
      tags:
        - roi
      summary: Get All
      description: Returns all the regions of interest.
      operationId: get-rois
      parameters:
        - name: lat
          in: query
          description: |
            If you want you can specify a couple of coordinates to return the roi(s) that contiains the point with that
            coordinates. The ```lat``` parameter is the latitude of the point. If you set a value of this parameter
            you also have to set a value to the ```lon``` parameter.
          required: false
          schema:
            type: number
        - name: lon
          in: query
          description: |
            If you want you can specify a couple of coordinates to return the roi(s) that contiains the point with that
            coordinates. The ```lon``` parameter is the longitude of the point. If you set a value of this parameter
            you also have to set a value to the ```lat``` parameter.
          required: false
          schema:
            type: number
        - name: includeCoords
          in: query
          description: States if the response must contain the ```geometry``` field.
          required: false
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Roi'

  /misc/weather:

    get:
      tags:
        - misc
      summary: Get Weather Data
      description: |
        Returns the current weather data of a specific location.

        The data are taken from [OpenWeather](https://openweathermap.org/)
      operationId: get-weather
      parameters:
        - name: lat
          in: query
          description: "The latitude of the location."
          required: true
          schema:
            type: number
        - name: lon
          in: query
          description: "The longitude of the location."
          required: true
          schema:
            type: number
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  sky:
                    type: integer
                    description: The numeric code corresponding to the weather condition (see enum in Observation model).
                  temperature:
                    type: number
                    description: The temperature in °C.
                  wind:
                    type: number
                    description: The wind speed in m/s.
                required:
                  - sky
                  - temperature
                  - wind

  /misc/links:

    get:
      tags:
        - misc
      summary: Get Links
      description: Returns the links to be displayed in SIMILE application ordered by `order` property.
      operationId: get-links
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Link'

  /misc/authority-contacts:

    get:
      tags:
        - misc
      summary: Get authority contacts
      description: Returns the contacts of the competent authority of each area supported by SIMILE application.
      operationId: get-contacts
      parameters:
        - name: area
          in: query
          description: |
            The area of competence of the wanted authority.

            See Roi's enumeration for possible values.
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Contact'

#----------------------
# Reusable components
#----------------------
components:

  schemas:
    User:
      $ref: ./models/user/user.yaml
    Observation:
      $ref: ./models/observation/observation.yaml
    Alert:
      $ref: ./models/alert/alert.yaml
    Event:
      $ref: ./models/event/event.yaml
    Roi:
      $ref: ./models/roi.yaml
    Link:
      $ref: ./models/misc/link.yaml
    Contact:
      $ref: ./models/misc/authorityContact.yaml
