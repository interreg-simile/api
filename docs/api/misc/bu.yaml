openapi: 3.0.0
info:
  version: 1.0.0
  title: SIMILE Api
  license:
    name: GNU GPLv3
    url: 'https://choosealicense.com/licenses/gpl-3.0/'
  description: Complete the description...
  contact:
    name: Edoardo Pessina
    email: interreg-simile@polimi.it
servers:
  - url: 'https://api-simile.como.polimi.it/v1'
paths:
  /alerts:
    get:
      summary: Get all the alerts
      tags:
        - Alerts
      responses:
        '200':
          description: |-
            OK

            If the request is performed by a non-admin user, the resources in the response will not contain the ```uid``` field.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: ./models/alert.yaml
              examples:
                Example:
                  value:
                    - _id: 5e56861fb4b85a544423b35e
                      uid: 5dd7bbe0701d5bdd685c1f17
                      title:
                        it: Titolo della comunicazione
                        en: Title of the alert
                      content:
                        it: Contenuto della comunicazione
                        en: Content of the alert
                      dateEnd: '2020-03-26T14:52:15.168+00:00'
                      markedForDeletion: false
                      createdAt: '2020-02-26T14:52:15.171+00:00'
                      updatedAt: '2020-02-26T14:52:15.171+00:00'
      operationId: get-alerts
      description: Retrieves all the alerts saved in the system.
      parameters:
        - schema:
            type: boolean
            default: 'true'
          in: query
          name: includePast
          description: Whether the expired alerts should be returned or not.
        - schema:
            type: boolean
            default: 'false'
          in: query
          name: includeDeleted
          description: |-
            Whether the deleted alerts should be returned or not.

            **Only admin users can set this flag to true.**
        - schema:
            type: string
          in: query
          name: sort
          description: |-
            The sorting rule to apply to the results.

            Possible values are:
            - ```createdAt:(asc/desc)```
            - ```dateEnd:(asc/desc)```
    parameters: []
  /observations:
    get:
      summary: Get all the observations
      tags:
        - Observations
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Observation'
      operationId: get-observations
      description: Retrieves all the observations stored in the database.
      parameters:
        - $ref: '#/components/parameters/acceptLanguageHeader'
components:
  schemas:
    Observation:
      $ref: ./models/observation.yaml
  parameters:
    acceptLanguageHeader:
      name: Accept-Language
      description: Defines which natural languge is preferred by the client.
      in: header
      schema:
        type: string
        default: it
        enum:
          - it
          - en
      allowEmptyValue: true
      required: false
tags:
  - name: Alerts
  - name: Observations
